#include "pch.h"

// Библиотека ввода/вывода
#include <iostream>
#include <fstream>
#include <cstdio>

// Обработка ошибок
#include <exception>

// Библиотека контейнеров
#include <vector>
#include <list>
#include <map>

// Библиотека строк
#include <string>
#include <cctype>

// Специфичные для ОС

// Тут предкомпиляция заканчивается
#pragma hdrstop

#define DEBUG

const string directions[] = { // массив комманд для робота
	"сложение",
	"вычетание",
	"умножение",
	"деление",
	"скороговорка",
	"цитата",
	"пословица",
	"дата"
};

using namespace std;

/*=== Класс робота ===*/
class robot {
private: // спецификатор доступа private
	double day, month, year;

	double num_1;
	double num_2;

	string command; // комманды пользователя программе

	const string patter[] = { // массив скороговорок
	};

	const string quotes[] = { // массив цитат
		"Если у тебя получилось обмануть человека, это не значит, что он дурак, это значит, что тебе доверяли больше, чем ты этого заслуживаешь.",
		"Настоящий друг — это человек, который выскажет тебе в глаза все, что о тебе думает, а всем скажет, что ты — замечательный человек.",
		"В падающем самолёте нет атеистов.",
		"Когда человек действительно хочет чего-то, вся Вселенная вступает в сговор, чтобы помочь этому человеку осуществить свою мечту.",
		"Не тот велик, кто никогда не падал, а тот велик — кто падал и вставал!",
		"Мы в жизни любим только раз, а после ищем лишь похожих.",
		"Симпатия — это когда нравится внешность, влюблённость — когда нравится внешность и характер, а любовь — это когда нравятся даже недостатки.",
		"Когда тебе тяжело, всегда напоминай себе о том, что если ты сдашься, лучше не станет.",
		"Какой бы сильной ни была женщина, она ждет мужчину сильнее себя и не для того, чтобы он ограничивал ей свободу, а для того, чтобы он дал ей право быть слабой.",
		"Умей ценить того кто без тебя не может, и не гонись за тем, кто счастлив без тебя!",
		"Если вы хотите осчастливить весь мир, идите домой и любите свою семью.",
		"Победи себя и выиграешь тысячи битв.",
		"Заведите себе «идиотскую» привычку радоваться неудачам. Это гораздо веселей, чем раздражаться и ныть по любому поводу.",
		"Если Вы стали для кого-то плохим, значит много хорошего было сделано для этого человека.",
		"Нашедший себя теряет зависимость от чужих мнений.",
		"Прежде чем диагностировать у себя депрессию и заниженную самооценку, убедитесь, что вы не окружены идиотами.",
		"Есть три вещи, которых боится большинство людей: доверять, говорить правду и быть собой.",
		"Проблема в том, что, не рискуя, мы рискуем в сто раз больше.",
		"Можно закрыть глаза на то, что видишь. Но нельзя закрыть сердце на то, что ты чувствуешь.",
		"Вместо того, чтобы стирать слезы с лица, сотрите из жизни людей, которые заставили вас плакать.",
		"Если вы уходите и вас никто не зовёт обратно – вы идете в верном направлении.",
		"Невозможно – это всего лишь громкое слово, за которым прячутся маленькие люди.",
		"Боишься — не делай, делаешь — не бойся, а сделал — не сожалей."
	};

	const string proverb[] = { // массив пословиц
	};

	double random_patter = patter[rand() % 5];
	double random_quotes = quotes[rand() % 5];
	double random_proverb = proverb[rand() % 5];
public: // спецификатор доступа public
	void direct(int i) {  // функция (метод класса) для вывода всех комманд
		const double numDirections = sizeof(directions) / sizeof(directions[0]);
		do {
			cout << i << ". " << directions << endl;
			i++;
		} while (i < numDirections);
	}

	void setDate(int date_day, int date_month, int date_year) { // установка даты в формате дд.мм.гг
		day = date_day; // инициализация день
		month = date_month; // инициализация месяц
		year = date_year; // инициализация год
	}

	void valid() { // функция (метод класса) для выполнения комманд
		cout << "Выберите комманду: ";
		cin >> command;

		switch (command) { // проверяем на true
			case directions[0]: { // сложение
				cout << "Первое число: ";
				cin >> num_1;
				cout << "Второе число: ";
				cin >> num_2;

				cout << "Результат: " << num_1 + num_2 << endl;
				break;
			}
			case directions[1]: { // вычетание
				cout << "Первое число: ";
				cin >> num_1;
				cout << "Второе число: ";
				cin >> num_2;

				cout << "Результат: " << num_1 - num_2 << endl;
				break;
			}
			case directions[2]: { // умножение
				cout << "Первое число: ";
				cin >> num_1;
				cout << "Второе число: ";
				cin >> num_2;

				cout << "Результат: " << num_1 * num_2 << endl;
				break;
			}
			case directions[3]: { // деление
				cout << "Первое число: ";
				cin >> num_1;
				cout << "Второе число: ";
				cin >> num_2;

				cout << "Результат: " << num_1 / num_2 << endl;
				break;
			}
			case directions[4]: { // скороговорка
				cout << "Случайная скороговорка: " << random_patter << endl;
				break;
			}
			case directions[5]: { // цитата
				cout << "Случайная цитата: " << random_quotes << endl;
				break;
			}
			case directions[6]: { // пословица
				cout << "Случайная пословица: " << random_proverb << endl;
				break;
			}
			case directions[7]: { // дата
				cout << "Дата: " << day << "." << month << "." << year << endl;
				break;
			}
			default: { cout << "Нет такой комманды!" << endl; }
		}
	}

}; // конец объявления класса robot

void style() { // функция для стилизации консоли
	setlocale(LC_ALL, "Russian");
	system("color 4");
}

/*=== Функция main ===*/
int main(int argc, char const *argv[], char const *env[]) {

#ifdef DEBUG

	robot objCppstudio; // объявление объекта

	try {

		style();

		cout << "///===*_*DEBUG start*_*===///" << "%s\n\n" << endl;

		objCppstudio.valid(); // вызов функции класса valid
		objCppstudio.direct(1); // вызов функции класса direct (variable i = 1)
		objCppstudio.setDate(day, month, year); // инициализация даты

	}
	catch (const exception& e) {

		cout << e.what() << '\n';

	}

#else

	while (true) {
		cout << "%s\n" << "Error!" << endl;
	}

#endif

	system("pause");
	return 0;
}
